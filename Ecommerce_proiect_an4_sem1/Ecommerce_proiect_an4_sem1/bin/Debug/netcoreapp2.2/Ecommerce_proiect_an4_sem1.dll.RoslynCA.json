{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "3.8.0.0",
        "fileVersion": "3.8.0-5.20570.14 (6559f38c)",
        "semanticVersion": "3.8.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "S101",
          "level": "warning",
          "message": "Rename class 'LoginWith2faModel' to match pascal case naming rules, consider using 'LoginWith2FaModel'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Areas/Identity/Pages/Account/LoginWith2fa.cshtml.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 18,
                  "endLine": 13,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1075",
          "level": "warning",
          "message": "Refactor your code not to use hardcoded absolute paths or URIs.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Areas/Identity/Pages/Account/Manage/EnableAuthenticator.cshtml.cs",
                "region": {
                  "startLine": 19,
                  "startColumn": 55,
                  "endLine": 19,
                  "endColumn": 110
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S101",
          "level": "warning",
          "message": "Rename class 'Disable2faModel' to match pascal case naming rules, consider using 'Disable2FaModel'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Areas/Identity/Pages/Account/Manage/Disable2fa.cshtml.cs",
                "region": {
                  "startLine": 10,
                  "startColumn": 18,
                  "endLine": 10,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1186",
          "level": "warning",
          "message": "Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Migrations/20191109100253_addedIdentity3.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 33,
                  "endLine": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1186",
          "level": "warning",
          "message": "Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Migrations/20191109093339_addedIdentity2.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 33,
                  "endLine": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1186",
          "level": "warning",
          "message": "Add a nested comment explaining why this method is empty, throw a 'NotSupportedException' or complete the implementation.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///E:/automatica/automaticaMasterAn1/msic/ecommerce/Ecommerce_proiect_an4_sem1/Ecommerce_proiect_an4_sem1/Migrations/20191109091815_addedIdentity1.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 33,
                  "endLine": 12,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S101": {
          "id": "S101",
          "shortDescription": "Types should be named in PascalCase",
          "fullDescription": "Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise, two consecutive upper case characters are allowed unless they form the whole type name. So, MyXClass is compliant, but XC on its own is not.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-101",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S1075": {
          "id": "S1075",
          "shortDescription": "URIs should not be hardcoded",
          "fullDescription": "Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by customizable parameter.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1075",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope"
            ]
          }
        },
        "S1186": {
          "id": "S1186",
          "shortDescription": "Methods should not be empty",
          "fullDescription": "There are several reasons for a method not to have a method body:",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1186",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        }
      }
    }
  ]
}